rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role in ['admin', 'super_admin'];
    }

    // =========================
    // üîê Users Collection
    // =========================
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if isAdmin();
      allow create, update: if request.auth != null && request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }
    

    // =========================
    // üìÖ Events Collection
    // =========================
    match /events/{eventId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    

    // =========================
    // ‚úÖ Attendance Collection
    // =========================
    match /attendance/{attendanceId} {
      // Admins or owners can read
      allow read: if isSignedIn() &&
        (isAdmin() || resource.data.userId == request.auth.uid);

      // Visitor logic: unauthenticated users allowed if proper fields provided
      allow create: if (
        (!isSignedIn() &&
          request.resource.data.attendanceType == 'visitor' &&
          request.resource.data.keys().hasAll([
            'eventId',
            'status',
            'visitorName',
            'visitorDesignation',
            'visitorClub',
            'visitorComment',
            'timestamp'
          ]) &&
          !request.resource.data.keys().hasAny(['userId']))
        ||

        // Member logic: must be signed in and include own user ID
        (isSignedIn() &&
          request.resource.data.attendanceType == 'member' &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.keys().hasAll([
            'eventId',
            'status',
            'userId',
            'timestamp'
          ])
        )
      );

      allow update, delete: if isAdmin();
    }

    // =========================
    // üí¨ Communication Groups
    // =========================
    match /communicationGroups/{groupId} {
      allow read, write: if isAdmin();
    }

    // =========================
    // üí° Project Ideas
    // =========================
    match /projectIdeas/{ideaId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;

      allow read: if isSignedIn() &&
        (resource.data.authorId == request.auth.uid || isAdmin());

      allow update: if isSignedIn() &&
        (resource.data.authorId == request.auth.uid || isAdmin());

      allow delete: if isAdmin();
    }
    
     match /transactions/{transactionId} {
        // Only admins can manage financial transactions
        allow read, create, update, delete: if isAdmin();
    }

    // =========================
    // üèÜ Points Entries
    // =========================
    match /pointsEntries/{entryId} {
      allow read, write: if isAdmin();
    }
    
      // Daily Tasks Collection (For Birthday Trigger)
    match /dailyTasks/{taskId} {
        // Only admins can read and write to the task tracker.
        allow read, write: if isAdmin();
    }
  }
}
