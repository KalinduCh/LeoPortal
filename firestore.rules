rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user profile
      // Users can read/update their own profile
      allow read, update: if isAdmin() || isOwner(userId);
      // Only admins can create or delete user profiles directly
      allow create, delete: if isAdmin();
    }
    
    // Rules for the 'events' collection
    match /events/{eventId} {
      // Anyone can read events (e.g., for visitor page)
      allow read: if true;
      // Only admins can create, update, or delete events
      allow write: if isAdmin();
    }
    
    // Rules for the 'attendance' collection
    match /attendance/{attendanceId} {
       // Anyone can create an attendance record (for members and visitors)
       allow create: if true;
       // Only admins or the user who created the record can read it
       allow read: if isAdmin() || isOwner(resource.data.userId);
       // Writing (update/delete) is restricted to admins
       allow write: if isAdmin();
    }

    // Rules for the 'projectIdeas' collection
    match /projectIdeas/{ideaId} {
        // A user can create a project idea if the authorId matches their own UID.
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        
        // Admins can read/update any idea.
        // The user who created the idea can also read it.
        allow read, update: if isAdmin() || isOwner(resource.data.authorId);
        
        // Only admins can delete ideas.
        allow delete: if isAdmin();
    }
  }
}
