rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read their own profile, admins can read/write all profiles.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Rules for user creation are handled by service logic (e.g. pending status)
      allow create: if request.auth != null; 
    }

    // Events can be read by any authenticated user, but only written by admins.
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Attendance can be read by admins or the user who owns it. Can be written by any authenticated user (members and visitors).
    match /attendance/{attendanceId} {
      allow read: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null; // Allows members and visitors to mark attendance
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Admins can read/write all groups.
    match /communicationGroups/{groupId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Project Ideas: users can manage their own, admins can manage all.
    match /projectIdeas/{ideaId} {
       allow read: if request.auth != null;
       allow create: if request.auth.uid == request.resource.data.authorId;
       allow update, delete: if request.auth.uid == resource.data.authorId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
