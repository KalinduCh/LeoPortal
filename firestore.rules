rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isApprovedMember() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'approved';
    }

    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read user profiles
      allow create: if request.auth != null; // New users can create their own profile on signup
      allow update: if isOwner(userId) || isSuperAdmin(); // User can update their own profile, or super admin can update any
      allow delete: if isSuperAdmin(); // Only super admin can delete users
    }
    
    match /events/{eventId} {
      allow read: if request.auth != null; // All authenticated users can read events
      allow create, update, delete: if isAdmin(); // Only admins can manage events
    }
    
    match /attendance/{attendanceId} {
      allow read: if isAdmin(); // Only admins can see full attendance lists
      // Allow members to read their own attendance, and anyone to write (for visitor check-in)
      allow write: if request.auth != null; 
      // More specific read for a user to see their own records
      allow list: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /communicationGroups/{groupId} {
        allow read, create, update, delete: if isAdmin();
    }
    
    match /transactions/{transactionId} {
        allow read, create, update, delete: if isAdmin();
    }

    match /projectIdeas/{ideaId} {
        allow read: if isApprovedMember();
        allow create: if isApprovedMember();
        allow update: if isOwner(resource.data.authorId) || isAdmin();
    }
    
    match /pointsEntries/{entryId} {
        allow read, create, delete, update: if isAdmin();
    }
  }
}