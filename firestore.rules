
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow create: if isUser(userId) || isAdmin(); // User creates own profile, admin can create too
      allow update: if isUser(userId) || isAdmin(); // User updates own, admin can update any
      allow delete: if isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      allow read: if true; // Everyone can read events (for visiting Leos page)
      allow create, update, delete: if isAdmin();
    }

    // Attendance Collection
    match /attendance/{attendanceId} {
      allow read: if (isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid && resource.data.attendanceType == 'member'));
      allow create: if (
        // Visitors can mark their attendance
        (request.resource.data.attendanceType == 'visitor' &&
         request.resource.data.keys().hasAll(['eventId', 'status', 'visitorName', 'visitorDesignation', 'visitorClub', 'timestamp']) &&
         !request.resource.data.keys().hasAny(['userId'])) || // Visitors should not have userId
        // Authenticated members can mark their own attendance
        (isSignedIn() &&
         request.resource.data.attendanceType == 'member' &&
         request.resource.data.userId == request.auth.uid &&
         request.resource.data.keys().hasAll(['eventId', 'status', 'userId', 'timestamp']))
      );
      allow update, delete: if isAdmin();
    }
  }
}
